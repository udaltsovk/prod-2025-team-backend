// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: seat-lock.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeatLock_SetLock_FullMethodName            = "/seatLock.SeatLock/SetLock"
	SeatLock_GetLockByUserID_FullMethodName    = "/seatLock.SeatLock/GetLockByUserID"
	SeatLock_GetLockBySeatIndex_FullMethodName = "/seatLock.SeatLock/GetLockBySeatIndex"
)

// SeatLockClient is the client API for SeatLock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatLockClient interface {
	SetLock(ctx context.Context, in *SetLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLockByUserID(ctx context.Context, in *GetLockByUserIdRequest, opts ...grpc.CallOption) (*LockResponse, error)
	GetLockBySeatIndex(ctx context.Context, in *GetLockBySeatIndexRequest, opts ...grpc.CallOption) (*LockResponse, error)
}

type seatLockClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatLockClient(cc grpc.ClientConnInterface) SeatLockClient {
	return &seatLockClient{cc}
}

func (c *seatLockClient) SetLock(ctx context.Context, in *SetLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SeatLock_SetLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatLockClient) GetLockByUserID(ctx context.Context, in *GetLockByUserIdRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, SeatLock_GetLockByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatLockClient) GetLockBySeatIndex(ctx context.Context, in *GetLockBySeatIndexRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, SeatLock_GetLockBySeatIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatLockServer is the server API for SeatLock service.
// All implementations must embed UnimplementedSeatLockServer
// for forward compatibility.
type SeatLockServer interface {
	SetLock(context.Context, *SetLockRequest) (*emptypb.Empty, error)
	GetLockByUserID(context.Context, *GetLockByUserIdRequest) (*LockResponse, error)
	GetLockBySeatIndex(context.Context, *GetLockBySeatIndexRequest) (*LockResponse, error)
	mustEmbedUnimplementedSeatLockServer()
}

// UnimplementedSeatLockServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeatLockServer struct{}

func (UnimplementedSeatLockServer) SetLock(context.Context, *SetLockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLock not implemented")
}
func (UnimplementedSeatLockServer) GetLockByUserID(context.Context, *GetLockByUserIdRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockByUserID not implemented")
}
func (UnimplementedSeatLockServer) GetLockBySeatIndex(context.Context, *GetLockBySeatIndexRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockBySeatIndex not implemented")
}
func (UnimplementedSeatLockServer) mustEmbedUnimplementedSeatLockServer() {}
func (UnimplementedSeatLockServer) testEmbeddedByValue()                  {}

// UnsafeSeatLockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatLockServer will
// result in compilation errors.
type UnsafeSeatLockServer interface {
	mustEmbedUnimplementedSeatLockServer()
}

func RegisterSeatLockServer(s grpc.ServiceRegistrar, srv SeatLockServer) {
	// If the following call pancis, it indicates UnimplementedSeatLockServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeatLock_ServiceDesc, srv)
}

func _SeatLock_SetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatLockServer).SetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatLock_SetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatLockServer).SetLock(ctx, req.(*SetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatLock_GetLockByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatLockServer).GetLockByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatLock_GetLockByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatLockServer).GetLockByUserID(ctx, req.(*GetLockByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatLock_GetLockBySeatIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockBySeatIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatLockServer).GetLockBySeatIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatLock_GetLockBySeatIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatLockServer).GetLockBySeatIndex(ctx, req.(*GetLockBySeatIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatLock_ServiceDesc is the grpc.ServiceDesc for SeatLock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatLock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seatLock.SeatLock",
	HandlerType: (*SeatLockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLock",
			Handler:    _SeatLock_SetLock_Handler,
		},
		{
			MethodName: "GetLockByUserID",
			Handler:    _SeatLock_GetLockByUserID_Handler,
		},
		{
			MethodName: "GetLockBySeatIndex",
			Handler:    _SeatLock_GetLockBySeatIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seat-lock.proto",
}
