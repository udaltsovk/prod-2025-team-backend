// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: reservation.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Reservation_Create_FullMethodName      = "/reservation.Reservation/Create"
	Reservation_GetByID_FullMethodName     = "/reservation.Reservation/GetByID"
	Reservation_GetBySeat_FullMethodName   = "/reservation.Reservation/GetBySeat"
	Reservation_GetByClient_FullMethodName = "/reservation.Reservation/GetByClient"
	Reservation_Get_FullMethodName         = "/reservation.Reservation/Get"
	Reservation_Update_FullMethodName      = "/reservation.Reservation/Update"
	Reservation_Cancel_FullMethodName      = "/reservation.Reservation/Cancel"
	Reservation_Visit_FullMethodName       = "/reservation.Reservation/Visit"
	Reservation_Delete_FullMethodName      = "/reservation.Reservation/Delete"
)

// ReservationClient is the client API for Reservation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	GetByID(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	GetBySeat(ctx context.Context, in *GetBySeatRequest, opts ...grpc.CallOption) (*ReservationsResponse, error)
	GetByClient(ctx context.Context, in *GetByClientRequest, opts ...grpc.CallOption) (*ReservationsResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ReservationsResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	Cancel(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Visit(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type reservationClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationClient(cc grpc.ClientConnInterface) ReservationClient {
	return &reservationClient{cc}
}

func (c *reservationClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, Reservation_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) GetByID(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, Reservation_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) GetBySeat(ctx context.Context, in *GetBySeatRequest, opts ...grpc.CallOption) (*ReservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationsResponse)
	err := c.cc.Invoke(ctx, Reservation_GetBySeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) GetByClient(ctx context.Context, in *GetByClientRequest, opts ...grpc.CallOption) (*ReservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationsResponse)
	err := c.cc.Invoke(ctx, Reservation_GetByClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ReservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationsResponse)
	err := c.cc.Invoke(ctx, Reservation_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, Reservation_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) Cancel(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Reservation_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) Visit(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Reservation_Visit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Reservation_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServer is the server API for Reservation service.
// All implementations must embed UnimplementedReservationServer
// for forward compatibility.
type ReservationServer interface {
	Create(context.Context, *CreateRequest) (*ReservationResponse, error)
	GetByID(context.Context, *GetByIdRequest) (*ReservationResponse, error)
	GetBySeat(context.Context, *GetBySeatRequest) (*ReservationsResponse, error)
	GetByClient(context.Context, *GetByClientRequest) (*ReservationsResponse, error)
	Get(context.Context, *GetRequest) (*ReservationsResponse, error)
	Update(context.Context, *UpdateRequest) (*ReservationResponse, error)
	Cancel(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Visit(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedReservationServer()
}

// UnimplementedReservationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReservationServer struct{}

func (UnimplementedReservationServer) Create(context.Context, *CreateRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReservationServer) GetByID(context.Context, *GetByIdRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedReservationServer) GetBySeat(context.Context, *GetBySeatRequest) (*ReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySeat not implemented")
}
func (UnimplementedReservationServer) GetByClient(context.Context, *GetByClientRequest) (*ReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByClient not implemented")
}
func (UnimplementedReservationServer) Get(context.Context, *GetRequest) (*ReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReservationServer) Update(context.Context, *UpdateRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReservationServer) Cancel(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedReservationServer) Visit(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Visit not implemented")
}
func (UnimplementedReservationServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReservationServer) mustEmbedUnimplementedReservationServer() {}
func (UnimplementedReservationServer) testEmbeddedByValue()                     {}

// UnsafeReservationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServer will
// result in compilation errors.
type UnsafeReservationServer interface {
	mustEmbedUnimplementedReservationServer()
}

func RegisterReservationServer(s grpc.ServiceRegistrar, srv ReservationServer) {
	// If the following call pancis, it indicates UnimplementedReservationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reservation_ServiceDesc, srv)
}

func _Reservation_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).GetByID(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_GetBySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).GetBySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_GetBySeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).GetBySeat(ctx, req.(*GetBySeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_GetByClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).GetByClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_GetByClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).GetByClient(ctx, req.(*GetByClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Cancel(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_Visit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Visit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_Visit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Visit(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reservation_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reservation_ServiceDesc is the grpc.ServiceDesc for Reservation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reservation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reservation.Reservation",
	HandlerType: (*ReservationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Reservation_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Reservation_GetByID_Handler,
		},
		{
			MethodName: "GetBySeat",
			Handler:    _Reservation_GetBySeat_Handler,
		},
		{
			MethodName: "GetByClient",
			Handler:    _Reservation_GetByClient_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Reservation_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Reservation_Update_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Reservation_Cancel_Handler,
		},
		{
			MethodName: "Visit",
			Handler:    _Reservation_Visit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Reservation_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation.proto",
}
