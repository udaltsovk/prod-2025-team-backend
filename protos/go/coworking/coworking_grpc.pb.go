// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: coworking.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coworking_Create_FullMethodName     = "/coworking.Coworking/Create"
	Coworking_GetByID_FullMethodName    = "/coworking.Coworking/GetByID"
	Coworking_Update_FullMethodName     = "/coworking.Coworking/Update"
	Coworking_Delete_FullMethodName     = "/coworking.Coworking/Delete"
	Coworking_CreateSeat_FullMethodName = "/coworking.Coworking/CreateSeat"
	Coworking_GetSeat_FullMethodName    = "/coworking.Coworking/GetSeat"
	Coworking_UpdateSeat_FullMethodName = "/coworking.Coworking/UpdateSeat"
	Coworking_DeleteSeat_FullMethodName = "/coworking.Coworking/DeleteSeat"
	Coworking_GetSeats_FullMethodName   = "/coworking.Coworking/GetSeats"
)

// CoworkingClient is the client API for Coworking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoworkingClient interface {
	Create(ctx context.Context, in *CreateCoworkingRequest, opts ...grpc.CallOption) (*CreateCoworkingResponse, error)
	GetByID(ctx context.Context, in *GetCoworkingByIDRequest, opts ...grpc.CallOption) (*CoworkingResponse, error)
	Update(ctx context.Context, in *UpdateCoworkingRequest, opts ...grpc.CallOption) (*CoworkingResponse, error)
	Delete(ctx context.Context, in *DeleteCoworkingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSeat(ctx context.Context, in *CreateSeatRequest, opts ...grpc.CallOption) (*SeatResponse, error)
	GetSeat(ctx context.Context, in *SeatRequest, opts ...grpc.CallOption) (*SeatResponse, error)
	UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*SeatResponse, error)
	DeleteSeat(ctx context.Context, in *SeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSeats(ctx context.Context, in *GetSeatsRequest, opts ...grpc.CallOption) (*SeatsResponse, error)
}

type coworkingClient struct {
	cc grpc.ClientConnInterface
}

func NewCoworkingClient(cc grpc.ClientConnInterface) CoworkingClient {
	return &coworkingClient{cc}
}

func (c *coworkingClient) Create(ctx context.Context, in *CreateCoworkingRequest, opts ...grpc.CallOption) (*CreateCoworkingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCoworkingResponse)
	err := c.cc.Invoke(ctx, Coworking_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) GetByID(ctx context.Context, in *GetCoworkingByIDRequest, opts ...grpc.CallOption) (*CoworkingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoworkingResponse)
	err := c.cc.Invoke(ctx, Coworking_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) Update(ctx context.Context, in *UpdateCoworkingRequest, opts ...grpc.CallOption) (*CoworkingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoworkingResponse)
	err := c.cc.Invoke(ctx, Coworking_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) Delete(ctx context.Context, in *DeleteCoworkingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Coworking_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) CreateSeat(ctx context.Context, in *CreateSeatRequest, opts ...grpc.CallOption) (*SeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeatResponse)
	err := c.cc.Invoke(ctx, Coworking_CreateSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) GetSeat(ctx context.Context, in *SeatRequest, opts ...grpc.CallOption) (*SeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeatResponse)
	err := c.cc.Invoke(ctx, Coworking_GetSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*SeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeatResponse)
	err := c.cc.Invoke(ctx, Coworking_UpdateSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) DeleteSeat(ctx context.Context, in *SeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Coworking_DeleteSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coworkingClient) GetSeats(ctx context.Context, in *GetSeatsRequest, opts ...grpc.CallOption) (*SeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeatsResponse)
	err := c.cc.Invoke(ctx, Coworking_GetSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoworkingServer is the server API for Coworking service.
// All implementations must embed UnimplementedCoworkingServer
// for forward compatibility.
type CoworkingServer interface {
	Create(context.Context, *CreateCoworkingRequest) (*CreateCoworkingResponse, error)
	GetByID(context.Context, *GetCoworkingByIDRequest) (*CoworkingResponse, error)
	Update(context.Context, *UpdateCoworkingRequest) (*CoworkingResponse, error)
	Delete(context.Context, *DeleteCoworkingRequest) (*emptypb.Empty, error)
	CreateSeat(context.Context, *CreateSeatRequest) (*SeatResponse, error)
	GetSeat(context.Context, *SeatRequest) (*SeatResponse, error)
	UpdateSeat(context.Context, *UpdateSeatRequest) (*SeatResponse, error)
	DeleteSeat(context.Context, *SeatRequest) (*emptypb.Empty, error)
	GetSeats(context.Context, *GetSeatsRequest) (*SeatsResponse, error)
	mustEmbedUnimplementedCoworkingServer()
}

// UnimplementedCoworkingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoworkingServer struct{}

func (UnimplementedCoworkingServer) Create(context.Context, *CreateCoworkingRequest) (*CreateCoworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCoworkingServer) GetByID(context.Context, *GetCoworkingByIDRequest) (*CoworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCoworkingServer) Update(context.Context, *UpdateCoworkingRequest) (*CoworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCoworkingServer) Delete(context.Context, *DeleteCoworkingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCoworkingServer) CreateSeat(context.Context, *CreateSeatRequest) (*SeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeat not implemented")
}
func (UnimplementedCoworkingServer) GetSeat(context.Context, *SeatRequest) (*SeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeat not implemented")
}
func (UnimplementedCoworkingServer) UpdateSeat(context.Context, *UpdateSeatRequest) (*SeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeat not implemented")
}
func (UnimplementedCoworkingServer) DeleteSeat(context.Context, *SeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeat not implemented")
}
func (UnimplementedCoworkingServer) GetSeats(context.Context, *GetSeatsRequest) (*SeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeats not implemented")
}
func (UnimplementedCoworkingServer) mustEmbedUnimplementedCoworkingServer() {}
func (UnimplementedCoworkingServer) testEmbeddedByValue()                   {}

// UnsafeCoworkingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoworkingServer will
// result in compilation errors.
type UnsafeCoworkingServer interface {
	mustEmbedUnimplementedCoworkingServer()
}

func RegisterCoworkingServer(s grpc.ServiceRegistrar, srv CoworkingServer) {
	// If the following call pancis, it indicates UnimplementedCoworkingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coworking_ServiceDesc, srv)
}

func _Coworking_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).Create(ctx, req.(*CreateCoworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoworkingByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).GetByID(ctx, req.(*GetCoworkingByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).Update(ctx, req.(*UpdateCoworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).Delete(ctx, req.(*DeleteCoworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_CreateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).CreateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_CreateSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).CreateSeat(ctx, req.(*CreateSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_GetSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).GetSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_GetSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).GetSeat(ctx, req.(*SeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_UpdateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).UpdateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_UpdateSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).UpdateSeat(ctx, req.(*UpdateSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_DeleteSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).DeleteSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_DeleteSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).DeleteSeat(ctx, req.(*SeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coworking_GetSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoworkingServer).GetSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coworking_GetSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoworkingServer).GetSeats(ctx, req.(*GetSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coworking_ServiceDesc is the grpc.ServiceDesc for Coworking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coworking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coworking.Coworking",
	HandlerType: (*CoworkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Coworking_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Coworking_GetByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Coworking_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Coworking_Delete_Handler,
		},
		{
			MethodName: "CreateSeat",
			Handler:    _Coworking_CreateSeat_Handler,
		},
		{
			MethodName: "GetSeat",
			Handler:    _Coworking_GetSeat_Handler,
		},
		{
			MethodName: "UpdateSeat",
			Handler:    _Coworking_UpdateSeat_Handler,
		},
		{
			MethodName: "DeleteSeat",
			Handler:    _Coworking_DeleteSeat_Handler,
		},
		{
			MethodName: "GetSeats",
			Handler:    _Coworking_GetSeats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coworking.proto",
}
